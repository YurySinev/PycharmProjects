from divide_line import line
# Итератор (iterator) — это объект, который возвращает свои элементы по одному за раз.
# Вы знаете, как внутри устроены строки? А списки? А множества? Чтобы пройтись по всем
# значениям этих последовательностей (пройтись — значит итерироваться), нам достаточно
# знать функцию, которая возвращает следующее значение, и нам не важно, как устроена
# та или иная последовательность.
# В качестве итератора могут выступать следующие объекты: функции-генераторы, которые
# мы прошли, а также последовательности после проведения над ними некоторых операций.
# Если вы не знаете, является ли объект итерируемым, можно использовать функцию iter(object)
# и передать ей в качестве аргумента объект для проверки. Если объект итерируемый, то вам
# вернется итератор, если нет, то будет соответствующая ошибка.

# iter(int)  # TypeError: 'type' object is not iterable
print(iter([1, 2, 3]))  # <list_iterator at 0x7fb593ca1940>

# Системная функция next() позволяет получить следующий элемент от итератора.
#
# Механизм взаимодействия с итераторами такой:
#         1. Сначала получить итератор от итерируемого объекта (объекта, для которого
#         разработан итератор вами или другими разработчиками).
#         2. Потом несколько раз обращаемся к итератору и получаем элементы
#         последовательности с помощью функции next().
#
# Такой механизм взаимодействия реализован в цикле for. Цикл for — это всего лишь
# обёртка над итераторами. В отличие от других языков программирования, где для цикла
# for нужно использовать условие для остановки, в Python число шагов цикла ограничено
# длиной последовательности, над которой мы итерируемся.

for i in range(10):
    pass

line()
# Логика работы с итераторами в языке Python следующая:
#
#         1. Получаем итератор с помощью функции iter(iterable_object).
#         2. Вызываем много раз next(iterator) от полученного итератора.
#         3. Когда получим ошибку StopIteration — прекращаем работу.
#
# В качестве примера возьмём строку и получим от неё итератор:

str_ = "my test"
str_iter = iter(str_)

print(type(str_))  # строка
print(type(str_iter))  # итератор строки

# Получим первый элемент строки
print(next(str_iter))  # m

# Получим ещё несколько элементов последовательности
print(next(str_iter))  # y
print(next(str_iter))  #
print(next(str_iter))  # t
print(next(str_iter))  # s
print(next(str_iter))  # t
print(next(str_iter))  # t

line('-')
