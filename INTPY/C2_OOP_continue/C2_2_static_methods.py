#
# C2.2. Cтатические методы
#
# Статические методы — это методы, которые относятся сразу ко всем объектам класса
# и могут вызываться вне конкретного объекта, обращаясь к классу напрямую.
#
# Например, нам надо вывести какую-то информацию или выполнить действие, которое
# не зависит от какого-либо объекта. Допустим, это действие для всех объектов
# абсолютно одинаково и не зависит от значения полей. В этом случае мы можем
# использовать статические методы.
#
# Смотрим пример кода:

class StaticClass:
    @staticmethod  # помечаем метод, который мы хотим сделать статичным декоратором @staticmethod
    def bar():
        print("bar")


StaticClass.bar()

# В результате работы программы выводится сообщение в консоль: bar.
#
# И тут вы спросите: «Чё за дела? Как же так, а где self? Почему мы вызываем
# метод без объекта?». На что найдётся довольно простой ответ. Дело в том,
# что статические методы не принимают первым аргументом наш любимый self.
# Если вы помните тему из ООП (модуль С1), то там во всех методах обязательно
# стоял self первым аргументом для получения состояния объекта. В этом же
# случае основной принцип статических методов — их выполнение не зависит
# от состояния конкретного объекта. С одной стороны, мы можем быстро и удобно
# вызывать какие-то общие методы, но с другой — получить информацию о
# состоянии объекта не получится, даже если мы будем вызывать статический
# метод через объект, а не через прямое обращение к классу, а так делать тоже можно.
#
# Пример вызова статического метода через объект:

f = StaticClass()
f.bar()


# Вызов статического метода через объекты не возбраняется, но считается
# не очень хорошим тоном. И да, прошу заметить, что вызовы статических
# методов у любого объекта будут совпадать и не зависеть друг от друга,
# как и было сказано ранее.
#
# В каких случаях стоит использовать статические методы? Хороший вопрос.
#
# Статические методы надо использовать, когда мы должны выполнить какое-то действие,
# которое не зависит от состояния объекта. Например, прочитать какой-нибудь файл или
# вывести на экран какую-либо информацию. Иногда через статические методы
# удобно хранить константы.

class StaticClass_:
    @staticmethod
    def GET_BAR():  # вспоминаем, что константа пишется со всеми заглавными буквами
        # (в простонародье — капсом)
        return "bar"


print(StaticClass_.GET_BAR())


# В результате увидим в консоли: bar.
#
# Хотя тут можно было бы обойтись и полями. Да и по правде признаться,
# для хранения констант лучше всего, конечно же, использовать поля, чтобы
# не смущать своих коллег. Используйте статические методы в основном для
# работы с внешними ресурсами (API, файлы и т. д.).
#
# И запомните — не пытайтесь шутить над своими товарищами программистами и
# подсовывать им выдуманные вами самими новшества. Программисты — это
# люди-роботы, у них есть свои стандарты, и им чужды человеческие эмоции
# (говорю вам как программист со стажем).

# Задание 2.2.1
#
# Обсудите с коллегами по курсу в Slack в канале соответствующего модуля,
# нарушают ли статические методы ООП? Когда бы вы стали использовать статические методы?

#  Задание 2.2.2
# Каким декоратором помечаются статические методы?
# Ответ: @staticmethod

#  Задание 2.2.3
# Выберите верные утверждения.
# Статические методы можно вызывать только с обращением к конкретному объекту.
# Статические методы используются только для хранения данных, общих для всех классов.
# Статические методы используются для выполнения определённых процедур, общих для любого объекта класса.
#   ВЕРНО
# Через статические методы нельзя получить информацию об объекте.
#   ВЕРНО
# Статические методы — это методы статических объектов.
# Статические методы можно вызывать и через класс, и через объект.
#   ВЕРНО

# Задание 2.2.4
#
# Напишите класс SquareFactory с одним статическим методом,
# принимающим единственный аргумент — сторону квадрата. Данный метод
# должен возвращать объект класса Square с переданной стороной.

class Square:
    def __init__(self, a):
        self.a = a

    def get_area(self): # это в задании не требуется, просто для тренировки добавил
        return self.a ** 2


class SquareFactory:
    @staticmethod
    def square(side):
        return Square(side)


sq = SquareFactory.square(74)
print(sq.a)
print(sq.get_area())


# ( см. дальше C2_3_class_decorators.py )
