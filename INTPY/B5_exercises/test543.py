# Усложним задачу и реализуем функцию, решающую квадратные уравнения.
# Вспомним сначала матчасть:
#
"""
a*x**2 + b*x + c = 0 - общий вид уравнения
D = b**2 - 4*a*c - дискриминант
Если D<0, то уравнение не имеет вещественных корней
Если D=0, то уравнение имеет один корень - x = -b/(2*a)
Если D>0, то уравнение имеет два корня
x1 = (-b - D**0.5)/(2*a)
x2 = (-b + D**0.5)/(2*a)
"""""


# # P.S. D**0.5 - равносильно извлечению квадратного корня
#
# Пойдём поэтапно. Сначала напишем функцию, вычисляющую дискриминант уравнения.
#
# Задание 5.4.3
#
# Напишите функцию D(a, b, c), возвращающую дискриминант квадратного уравнения.

def D(a, b, c):
    return b ** 2 - 4 * a * c


# Следующим этапом реализуем функцию, возвращающую «Нет вещественных корней»,
# если дискриминант отрицательный.
#
# Задание 5.4.4
#
# Реализуйте функцию quadratic_solve(a, b, c), возвращающую «Нет вещественных корней»
# в случае отрицательного дискриминанта.

# def quadratic_solve(a,b,c):
#     if D(a,b,c) < 0:
#         return "Уравнение не имеет вещественных корней"

# Далее модифицируем функцию таким образом, чтобы при нулевом дискриминанте
# возвращалось значение единственного корня.
#
# Задание 5.4.5
#
# Модифицируйте функцию quadratic_solve(a, b, c), чтобы она возвращала
# единственный корень при условии нулевого дискриминанта.

# def quadratic_solve(a, b, c):
#     if D(a, b, c) < 0:
#         return "Уравнение не имеет вещественных корней"
#     elif D(a, b, c) == 0:
#         return -b / (2 * a)

# И последним этапом нам нужно вернуть сразу два значения.
# Конечный вид функции будет выглядеть так:

def quadratic_solve(a, b, c):
    if D(a, b, c) < 0:
        return "Уравнение не имеет вещественных корней"
    elif D(a, b, c) == 0:
        return -b / (2 * a)
    else:
        return (-b - D(a, b, c) ** 0.5) / (2 * a), (-b + D(a, b, c) ** 0.5) / (2 * a)

#  Задание 5.4.6
#
# Какой тип возвращаемого значения имеет функция при положительном дискриминанте?

# tuple