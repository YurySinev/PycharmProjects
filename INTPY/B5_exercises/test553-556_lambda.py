#
# Lambda функции
#
# Функции map и filter принимают в виде первого аргумента другую функцию,
# которая должна применяться к каждому элементу. Иногда встроенных функций
# не хватает, и приходится объявлять функцию, которая зачастую будет применена
# всего один раз. Но при этом она будет загромождать исходный код.
#
# Специально для таких одноразовых функций были сделаны анонимные функции.
# Объявляются они по ключевому слову lambda.
#
# эти две функции выполняют одно и то же, складывают два числа

def my_function(x1, x2):  # Обычная функция
    return x2 + x1


lambda x1, x2: x2 + x1  # Анонимная функция

# Анонимные функции могут содержать в себе только одну инструкцию (выражение), которую они выполняют.

# Возвести первые 10 натуральных чисел в квадрат

L = list(map(lambda x: x ** 2, range(1, 11)))  # правильно
print(L)
# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

# list(map(lambda x: x ** 2; x + 1, range(1, 11)))  #  неправильно, так как lambda содержит две конструкции

# Для чего могут быть полезны lambda-функции?
#
# Рассмотрим несколько примеров.
#
# Предположим, мы хотим отсортировать словарь по значениям. Вообще говоря, словарь
# (его ещё называют ассоциативным массивом) является неупорядоченной структурой данных.
# Иными словами, порядок хранения пар ключ-значение в памяти может быть произвольным.
# Однако создатели языка Python, начиная с версии 3.6, изменили реализацию словарей таким образом,
# что порядок ключей «запоминается». И потому упорядочивание словаря в Python становится
# осмысленным. По умолчанию словарь сортируется по ключам.

d = {2: "c", 1: "d", 4: "a", 3: "b"}

# Чтобы отсортировать его по ключам, нужно сделать так
print(dict(sorted(d.items())))
# {1: 'd', 2: 'c', 3: 'b', 4: 'a'}

# А вот, чтобы отсортировать словарь по значениям, необходимо указать, что сортировать
# нужно по второму элементу кортежа ключ-значение. Тут на помощь приходят lambda-функции.
# У встроенной функции sorted() можно задать аргумент key, который укажет,
# по какому ключу нужно производить сортировку.

print(dict(sorted(d.items(), key=lambda x: x[1])))  # сортировка по значению словаря

# Итог по lambda-функциям:

# используются один раз;
# не загромождают код программы;
# после выполнения сразу удаляются;
# могут выполнять только одно действие.

# Задание 5.5.3
# Предположим у нас есть список с данными о росте и весе людей.
# Задача — отсортировать их по индексу массы тела. Он вычисляется по формуле:
# свой рост в сантиметрах возвести в квадрат, потом массу тела в килограммах
# разделить на полученную цифру.

# (вес, рост)
data = [
    (82, 1.91),
    (68, 1.74),
    (90, 1.89),
    (73, 1.79),
    (76, 1.84)
]

# Ответ
print(list(sorted(data, key=lambda x: x[0] / x[1] ** 2)))

# Задание 5.5.4
# Из списка в предыдущем задании найти кортеж с минимальным индексом массы тела.
# Ответ

print(min(data, key=lambda x: x[0] / x[1] ** 2))

# Задание 5.5.5
# Замените знаки «?» корректным выражением. Вывести длину каждого элемента в списке.

a = ["asd", "bbd", "ddfa", "mcsa","sdflkjn","ser","asdlkjngu"]

# print( ??? )

# Примечание. Попробуйте выполнить это задание без lambda-функций, используя только встроенные функции.
print(list(map(len, a)))

# Задание 5.5.6
# Замените знаки «?» корректным выражением. Переведите все строки из списка
# в верхний регистр (заглавные буквы).

a = ["это", "маленький", "текст", "обидно"]

# print( ??? )
print(list(map(str.upper, a)))
# Примечание. Попробуйте выполнить это задание без lambda-функций, используя только встроенные функции.
