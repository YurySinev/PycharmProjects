# В теме «Условный оператор» мы познакомились с механизмом ветвления кода в зависимости
# от условий. А также рассмотрели, какими могут быть эти условия.
# Отдельное внимание уделяли проверке тождественности объекта с загадочным NoneType.
# Это тип, у которого может быть один и только один объект — None. По своему смыслу
# это буквально «ничто», и потому не имеет никакого поведения. Зачем тогда использовать его?
# Во-первых, чтобы объявить переменную, но не определять ей какое-то значение.

some_var = None

# Во-вторых, такие объекты удобны при использовании в функциях в качестве начальных значений
# аргументов и/или возвращаемого значения. Применений множество, но важно помнить, что если
# мы хотим проверить переменную, является ли она «ничем», то нужно обязательно использовать
# is, а не ==, иначе можно получить неожиданный результат.

if some_var is None:
    print("NoneType")
else:
    print(type(some_var))

# Задание 5.3.2
# Проверьте, что выведет предыдущий пример кода, если переменная будет иметь значение:
some_var = (2,)
if some_var is None:
    print("NoneType")
else:
    print(type(some_var))

# Используя такую конструкцию, можно менять логику программы в зависимости от того,
# было ли присвоено значение переменной, или же оно None.


