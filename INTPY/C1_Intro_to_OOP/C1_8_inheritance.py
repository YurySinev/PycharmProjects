#
# C1.8. Наследование класса

# Классы также можно передавать в другие файлы с помощью импорта.
# Рассмотрим импорт на примере класса прямоугольника.
#
# Создадим конструктор, который будет описывать прямоугольник
# с имеющимися характеристиками: ширина и высота.
#
# Вычислим площадь фигуры (area): (рисунок)

# ВАЖНО: работать будем с  несколькими файлами, размещенными в папке practice_C1.
# Не забывайте сохранять файлы с помощью Ctrl+S!

class Rectangle:
    def __init__(self, width, heigth):
        self.width = width
        self.height = heigth

    def get_width(self):
        return self.width

    def get_height(self):
        return self.height

    # Метод, рассчитывающий площадь
    def get_area(self):
        return self.width * self.height

# Выполним импорт из основного файла класса, где описан прямоугольник (Rectangle),
# «возьмём» оттуда все свойства, такие как width (ширина) и height (высота),
# и создадим «псевдо» прямоугольник r1.

# Прямоугольник r1 должен получить те же характеристики, что и базовый прямоугольник
# (Rectangle).  Проиллюстрируем сказанное схемой: (рисунок)

# Создадим ещё отдельный файл под названием testRectangle.py для того, чтобы
# реализовать наследование. Причём обязательно в той папке, где находится
# figures.py (в нашем случае это папка practice_C1).

# from rectangle import Rectangle

r1 = Rectangle(10, 5)

print("r1.width =", r1.width)
print("r1.height =", r1.height)
print("r1.get_width =", r1.get_width())
print("r1.get_height =", r1.get_height())
print("r1.get_area =", r1.get_area())

# Обратите внимание, как осуществляется импорт, то есть прописывается с помощью
# ключевых фраз: from название файла, import название класса. Теперь попробуйте
# запустить testRectangle.py, вы должны получить ожидаемый результат,
# характеристики со значениями прямоугольника: (рисунок)

# Теперь попробуйте самостоятельно вывести второй унаследованный прямоугольник,
# назвав его, например, r2.

# Каков механизм работы? Когда вы создаёте объект класса Rectangle, конструктор
# этого класса будет вызван для создания объекта, а атрибутам объекта будут
# присвоены значения из параметра.

# Проиллюстрируем сказанное схемой: (рисунок)

# Задание 1.8.1
#
# Создайте класс Cat в отдельном файле. Класс должен содержать
# конструктор с параметрами: имя, пол, возраст и методы get(),
# которые будут возвращать все параметры объекта.
#
# В другом файле создайте экземпляры класса. В качестве входных данных
# используйте данные о котах с сайта «Дом питомца».
# Не забудьте импортировать класс Cat в файл.
#
# Далее сделайте вывод информации о котах в консоль.

# Ответ:

class Cat:
  def __init__(self, name, gender, age):
      self.name = name
      self.gender = gender
      self.age = age


  def get_name(self):
      return self.name

  def get_gender(self):
      return self.gender

  def get_age(self):
      return self.age


cat_1 = Cat("Baron", "boy", 2)
cat_2 = Cat("Sam", "boy", 2)

print(cat_1.get_name(), cat_1.get_gender(), cat_1.get_age())
print(cat_2.get_name(), cat_2.get_gender(), cat_2.get_age())

# Задание 1.8.2
#
# Создайте класс Dog с помощью наследования класса Cat. Создайте метод
# get_pet() таким образом, чтобы он возвращал только имя и возраст.
#
# Далее сделайте вывод этой информации в консоль.

# Ответ:
class Dog(Cat):
    def get_pet(self):
        return f'{self.get_name()} {self.get_age()}'

dog_1=Dog("Felix","boy",2)

print(dog_1.get_pet())
#

from cat import Cat

tyapa = Cat("Тяпа", "жен", 3)
print(tyapa.get_name())
print(tyapa.gender)
print(tyapa.get_age())